// 内描边

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        size: { value: [500.0, 500.0], editor: { tooltip: '节点尺寸' } }
        outlineColor: { value: [1.0, 0.0, 0.0, 1], editor: { type: color, tooltip: '颜色' } }
        outlineWidth: { value: 5.0, editor: { tooltip: '宽度' } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>

  in vec3 a_position;
  in vec2 a_uv0;
  in vec4 a_color;

  out vec2 v_uv0;
  out vec4 v_color;

  void main () {
    gl_Position = cc_matViewProj * vec4(a_position, 1);

    v_uv0 = a_uv0;
    
    v_color = a_color;
  }
}%


CCProgram fs %{
  precision highp float;

  in vec2 v_uv0;
  uniform sampler2D texture;

  in vec4 v_color;

  uniform Properties {
    vec4 outlineColor;
    vec2 size;
    float outlineWidth;
  };

  float getAlpha (float angle, vec2 width) {
    float radian = radians(angle);
    vec2 offset = vec2(width.x * cos(radian), width.y * sin(radian));
    vec2 uv = v_uv0 + offset;
    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
      return 0.0;
    }
    return texture(texture, uv).a;
  }

  void main () {
    vec4 color = v_color;
    color *= texture(texture, v_uv0);

    vec2 width = outlineWidth / size;

    const float samples = 8.0;
    float interval = 360.0 / samples;

    float alpha = 1.0;
    for (float i = 0.0; i < samples; i++) {
      alpha *= getAlpha(i * interval, width);
    }

    color.rgb = mix(outlineColor.rgb, color.rgb, alpha);

    gl_FragColor = color;
  }
}%
