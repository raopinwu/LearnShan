{
  "ver": "1.0.27",
  "uuid": "baa4e95b-ebeb-4e8c-b3b2-a84e6c5fcc3f",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nattribute vec4 a_color;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
        "frag": "\nprecision highp float;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvarying vec4 v_color;\nuniform vec4 outlineColor;\nuniform vec2 size;\nuniform float outlineWidth;\nfloat getAlpha (float angle, vec2 width) {\n  float radian = radians(angle);\n  vec2 offset = vec2(width.x * cos(radian), width.y * sin(radian));\n  vec2 uv = v_uv0 + offset;\n  if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n    return 0.0;\n  }\n  return texture2D(texture, uv).a;\n}\nvoid main () {\n  vec4 color = v_color;\n  color *= texture2D(texture, v_uv0);\n  vec2 width = outlineWidth / size;\n  const float samples = 8.0;\n  float interval = 360.0 / samples;\n  float alpha = 1.0;\n  for (float i = 0.0; i < samples; i++) {\n    alpha *= getAlpha(i * interval, width);\n  }\n  color.rgb = mix(outlineColor.rgb, color.rgb, alpha);\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nin vec4 a_color;\nout vec2 v_uv0;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
        "frag": "\nprecision highp float;\nin vec2 v_uv0;\nuniform sampler2D texture;\nin vec4 v_color;\nuniform Properties {\n  vec4 outlineColor;\n  vec2 size;\n  float outlineWidth;\n};\nfloat getAlpha (float angle, vec2 width) {\n  float radian = radians(angle);\n  vec2 offset = vec2(width.x * cos(radian), width.y * sin(radian));\n  vec2 uv = v_uv0 + offset;\n  if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n    return 0.0;\n  }\n  return texture(texture, uv).a;\n}\nvoid main () {\n  vec4 color = v_color;\n  color *= texture(texture, v_uv0);\n  vec2 width = outlineWidth / size;\n  const float samples = 8.0;\n  float interval = 360.0 / samples;\n  float alpha = 1.0;\n  for (float i = 0.0; i < samples; i++) {\n    alpha *= getAlpha(i * interval, width);\n  }\n  color.rgb = mix(outlineColor.rgb, color.rgb, alpha);\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}